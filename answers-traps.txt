Q1: Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf?
A1: a0 ~ a7; a2.

Q2: Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)
A2: There is none. g(x) is inlined within f(x) and f(x) is further inlined into main().

Q3: At what address is the function printf located?
A3: 0x0000000000000628, main calls it with pc-relative addressing.

Q4: What value is in the register ra just after the jalr to printf in main?
A4: 0x0000000000000038, next line of assembly right after the jalr.

Q5: What is the output? Here's an ASCII table that maps bytes to characters. The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?
A5: "He110 World"; 0x726c6400; no, 57616 is e110 in hex regardless of endianness.

Q6: In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?
    printf("x=%d y=%d", 3);
A6: A random value depending on what codes there are right before the call.Because printf tried to read more arguments than supplied.
    The second argument `3` is passed in a1, and the register for the third argument, a2, is not set to any specific value before the
    call, and contains whatever there is before the call.